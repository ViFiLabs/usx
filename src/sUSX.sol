// SPDX-License-Identifier: MIT
pragma solidity 0.8.30;

import {ERC4626} from "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

// Only stakers of USX receive the profits generated by the Asset Manager

// sUSX share price is updated based on Asset Manager reports.
// If gains, new USX is minted and the share price linearlly increases till next epoch.
// If losses, share price immediately decreases.

// Upgradeable smart contract UUPS
// ERC7201
// ReentrancyGuard

contract sUSX is ERC4626 {

    /*=========================== Errors =========================*/

    error ZeroAddress();
    error NotGovernance();

    /*=========================== Events =========================*/

    /*=========================== Modifiers =========================*/

    modifier onlyGovernance() {
        if (msg.sender != governance) revert NotGovernance();
        _;
    }

    /*=========================== State Variables =========================*/

    // USX token reference (the underlying asset)
    IERC20 public immutableusxToken;

    // address that controls governance of the contract
    address public governance;

    // withdrawal period in blocks, (default == 108000 (15 days))
    uint256 public withdrawalPeriod;
    
    // fraction of withdrawals determining the withdrawal fee, (default 0.5% == 500) with precision to 0.001 percent
    uint256 public withdrawalFeeFraction;

    // withdrawal period in blocks, (default == 108000 (15 days))
    uint256 public minWithdrawalPeriod;

    // timestamp of the last epoch
    uint256 public lastEpochTime;

    /*=========================== Constructor =========================*/

    constructor(
        address _usxToken,
        address _governance,
        ) ERC4626(IERC20(_usxToken)) ERC20("sUSX Token", "sUSX") {
        if (_usxToken == address(0)) revert ZeroAddress();
        usxToken = IERC20(_usxToken);
        governance = _governance;
        
        // Set default values
        withdrawalPeriod = 108000;      // 15 days (assuming 12 second block time)
        withdrawalFeeFraction = 500;    // 0.5%
        minWithdrawalPeriod = 108000;   // 15 days
    }

    /*=========================== Public Functions =========================*/

    // instantly mints sUSX at sharePrice
    function deposit(uint256 USX_amount) public {}

    // user must wait for withdrawalPeriod to pass before unstaking (withdrawalPeriod)
    function requestWithdraw(uint256 sUSX_amount) public {}

    // after withdrawalPeriod AND epoch the user made withdrawal on is finished, after Gross Profits has been counted
    // user can finish unstaking sUSX for USX at the CURRENT sharePrice
    // portion is sent to the Governance Warchest (withdrawalFee applied here)
    function claimWithdraw() public {}

    // calculated using on chain USX balance and linear profit accrual (usxToken.balanceOf(this) + linear scaled profits from last epoch)
    function sharePrice() public view returns (uint256) {
        uint256 base    = usxToken.balanceOf(address(this));
        uint256 rewards = profitLatestEpoch();
        uint256 totalUSX = base + rewards;
        return totalUSX * 1e18 / this.totalSupply();
    }

    // TODO: Consider making state variable instead
    // withdrawal fee taken on all withdrawals that goes to the Governance Warchest
    function withdrawalFee() public view returns (uint256) {}

    /*=========================== Governance Functions =========================*/

    // sets withdrawal period in blocks, (Min amount (default) == 108000 (15days))
    function setMinWithdrawalPeriod(uint256 _minWithdrawalPeriod) public onlyGovernance {}

    // sets withdrawal fee with precision to 0.001 percent
    function setWithdrawalFeeFraction(uint256 _withdrawalFeeFraction) public onlyGovernance {}

    /*=========================== Internal Functions =========================*/

}